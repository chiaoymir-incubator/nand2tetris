function PongGame.new 0
  push constant 7
  call Memory.alloc 1
  pop pointer 0
  call Screen.clearScreen 0
  pop temp 0
  // do Screen . clearScreen ( ) ;
  push constant 50
  pop this 6
  // let batWidth = 50 ;
  push constant 230
  push constant 229
  push this 6
  push constant 7
  call Bat.new 4
  pop this 0
  // let bat = Bat . new ( 230 , 229 , batWidth , 7 ) ;
  push constant 253
  push constant 222
  push constant 0
  push constant 511
  push constant 0
  push constant 229
  call Ball.new 6
  pop this 1
  // let ball = Ball . new ( 253 , 222 , 0 , 511 , 0 , 229 ) ;
  push this 1
  push constant 400
  push constant 0
  call Ball.setDestination 3
  pop temp 0
  // do ball . setDestination ( 400 , 0 ) ;
  push constant 0
  push constant 238
  push constant 511
  push constant 240
  call Screen.drawRectangle 4
  pop temp 0
  // do Screen . drawRectangle ( 0 , 238 , 511 , 240 ) ;
  push constant 22
  push constant 0
  call Output.moveCursor 2
  pop temp 0
  // do Output . moveCursor ( 22 , 0 ) ;
  push constant 8
  call String.new 1
  push constant 83
  call String.appendChar 2
  push constant 99
  call String.appendChar 2
  push constant 111
  call String.appendChar 2
  push constant 114
  call String.appendChar 2
  push constant 101
  call String.appendChar 2
  push constant 58
  call String.appendChar 2
  push constant 32
  call String.appendChar 2
  push constant 48
  call String.appendChar 2
  call Output.printString 1
  pop temp 0
  // do Output . printString ( Score: 0 ) ;
  push constant 0
  pop this 3
  // let exit = false ;
  push constant 0
  pop this 4
  // let score = 0 ;
  push constant 0
  pop this 2
  // let wall = 0 ;
  push constant 0
  pop this 5
  // let lastWall = 0 ;
  push pointer 0
  return
  // return this ;

function PongGame.dispose 0
  push argument 0
  pop pointer 0
  push this 0
  call Bat.dispose 1
  pop temp 0
  // do bat . dispose ( ) ;
  push this 1
  call Ball.dispose 1
  pop temp 0
  // do ball . dispose ( ) ;
  push pointer 0
  call Memory.deAlloc 1
  pop temp 0
  // do Memory . deAlloc ( this ) ;
  push constant 0
  return
  // return ;

function PongGame.newInstance 0
  call PongGame.new 0
  pop static 0
  // let instance = PongGame . new ( ) ;
  push constant 0
  return
  // return ;

function PongGame.getInstance 0
  push static 0
  return
  // return instance ;

function PongGame.run 1
  push argument 0
  pop pointer 0
label PongGame.run.0
  push this 3
  not
  not
  if-goto PongGame.run.1
label PongGame.run.2
  push local 0
  push constant 0
  eq
  push this 3
  not
  and
  not
  if-goto PongGame.run.3
  call Keyboard.keyPressed 0
  pop local 0
  // let key = Keyboard . keyPressed ( ) ;
  push this 0
  call Bat.move 1
  pop temp 0
  // do bat . move ( ) ;
  push pointer 0
  call PongGame.moveBall 1
  pop temp 0
  // do moveBall ( ) ;
  push constant 50
  call Sys.wait 1
  pop temp 0
  // do Sys . wait ( 50 ) ;
  goto PongGame.run.2
label PongGame.run.3
  // }
  push local 0
  push constant 130
  eq
  not
  if-goto PongGame.run.4
  push this 0
  push constant 1
  call Bat.setDirection 2
  pop temp 0
  // do bat . setDirection ( 1 ) ;
  goto PongGame.run.5
label PongGame.run.4
  push local 0
  push constant 132
  eq
  not
  if-goto PongGame.run.6
  push this 0
  push constant 2
  call Bat.setDirection 2
  pop temp 0
  // do bat . setDirection ( 2 ) ;
  goto PongGame.run.7
label PongGame.run.6
  push local 0
  push constant 140
  eq
  not
  if-goto PongGame.run.8
  push constant 1
  neg
  pop this 3
  // let exit = true ;
  goto PongGame.run.9
label PongGame.run.8
label PongGame.run.9
  // }
label PongGame.run.7
  // }
label PongGame.run.5
  // }
label PongGame.run.10
  push local 0
  push constant 0
  eq
  not
  push this 3
  not
  and
  not
  if-goto PongGame.run.11
  call Keyboard.keyPressed 0
  pop local 0
  // let key = Keyboard . keyPressed ( ) ;
  push this 0
  call Bat.move 1
  pop temp 0
  // do bat . move ( ) ;
  push pointer 0
  call PongGame.moveBall 1
  pop temp 0
  // do moveBall ( ) ;
  push constant 50
  call Sys.wait 1
  pop temp 0
  // do Sys . wait ( 50 ) ;
  goto PongGame.run.10
label PongGame.run.11
  // }
  goto PongGame.run.0
label PongGame.run.1
  // }
  push this 3
  not
  if-goto PongGame.run.12
  push constant 10
  push constant 27
  call Output.moveCursor 2
  pop temp 0
  // do Output . moveCursor ( 10 , 27 ) ;
  push constant 9
  call String.new 1
  push constant 71
  call String.appendChar 2
  push constant 97
  call String.appendChar 2
  push constant 109
  call String.appendChar 2
  push constant 101
  call String.appendChar 2
  push constant 32
  call String.appendChar 2
  push constant 79
  call String.appendChar 2
  push constant 118
  call String.appendChar 2
  push constant 101
  call String.appendChar 2
  push constant 114
  call String.appendChar 2
  call Output.printString 1
  pop temp 0
  // do Output . printString ( Game Over ) ;
  goto PongGame.run.13
label PongGame.run.12
label PongGame.run.13
  // }
  push constant 0
  return
  // return ;

function PongGame.moveBall 5
  push argument 0
  pop pointer 0
  push this 1
  call Ball.move 1
  pop this 2
  // let wall = ball . move ( ) ;
  push this 2
  push constant 0
  gt
  push this 2
  push this 5
  eq
  not
  and
  not
  if-goto PongGame.moveBall.0
  push this 2
  pop this 5
  // let lastWall = wall ;
  push constant 0
  pop local 0
  // let bouncingDirection = 0 ;
  push this 0
  call Bat.getLeft 1
  pop local 1
  // let batLeft = bat . getLeft ( ) ;
  push this 0
  call Bat.getRight 1
  pop local 2
  // let batRight = bat . getRight ( ) ;
  push this 1
  call Ball.getLeft 1
  pop local 3
  // let ballLeft = ball . getLeft ( ) ;
  push this 1
  call Ball.getRight 1
  pop local 4
  // let ballRight = ball . getRight ( ) ;
  push this 2
  push constant 4
  eq
  not
  if-goto PongGame.moveBall.2
  push local 1
  push local 4
  gt
  push local 2
  push local 3
  lt
  or
  pop this 3
  // let exit = ( batLeft > ballRight ) | ( batRight < ballLeft ) ;
  push this 3
  not
  not
  if-goto PongGame.moveBall.4
  push local 4
  push local 1
  push constant 10
  add
  lt
  not
  if-goto PongGame.moveBall.6
  push constant 1
  neg
  pop local 0
  // let bouncingDirection = - 1 ;
  goto PongGame.moveBall.7
label PongGame.moveBall.6
  push local 3
  push local 2
  push constant 10
  sub
  gt
  not
  if-goto PongGame.moveBall.8
  push constant 1
  pop local 0
  // let bouncingDirection = 1 ;
  goto PongGame.moveBall.9
label PongGame.moveBall.8
label PongGame.moveBall.9
  // }
label PongGame.moveBall.7
  // }
  push this 6
  push constant 2
  sub
  pop this 6
  // let batWidth = batWidth - 2 ;
  push this 0
  push this 6
  call Bat.setWidth 2
  pop temp 0
  // do bat . setWidth ( batWidth ) ;
  push this 4
  push constant 1
  add
  pop this 4
  // let score = score + 1 ;
  push constant 22
  push constant 7
  call Output.moveCursor 2
  pop temp 0
  // do Output . moveCursor ( 22 , 7 ) ;
  push this 4
  call Output.printInt 1
  pop temp 0
  // do Output . printInt ( score ) ;
  goto PongGame.moveBall.5
label PongGame.moveBall.4
label PongGame.moveBall.5
  // }
  goto PongGame.moveBall.3
label PongGame.moveBall.2
label PongGame.moveBall.3
  // }
  push this 1
  push local 0
  call Ball.bounce 2
  pop temp 0
  // do ball . bounce ( bouncingDirection ) ;
  goto PongGame.moveBall.1
label PongGame.moveBall.0
label PongGame.moveBall.1
  // }
  push constant 0
  return
  // return ;

